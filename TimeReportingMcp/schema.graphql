schema {
  query: Query
  mutation: Mutation
}

type Mutation {
  logTime(input: LogTimeInput!): TimeEntry! @cost(weight: "10")
  updateTimeEntry(id: UUID! input: UpdateTimeEntryInput!): TimeEntry! @cost(weight: "10")
  deleteTimeEntry(id: UUID!): Boolean! @cost(weight: "10")
  moveTaskToProject(entryId: UUID! newProjectCode: String! newTask: String!): TimeEntry! @cost(weight: "10")
  updateTags(entryId: UUID! tags: [TagInput!]!): TimeEntry! @cost(weight: "10")
  submitTimeEntry(id: UUID!): TimeEntry! @cost(weight: "10")
  approveTimeEntry(id: UUID!): TimeEntry! @cost(weight: "10")
  declineTimeEntry(id: UUID! comment: String!): TimeEntry! @cost(weight: "10")
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Project {
  code: String!
  name: String!
  isActive: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  availableTasks: [ProjectTask!]!
  tags: [ProjectTag!]!
  timeEntries: [TimeEntry!]!
}

type ProjectTag {
  id: Int!
  tagName: String!
  isRequired: Boolean!
  isActive: Boolean!
  project: Project!
  allowedValues: [TagValue!]!
}

type ProjectTask {
  id: Int!
  taskName: String!
  isActive: Boolean!
  project: Project!
}

type Query {
  hello: String!
  timeEntries("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: TimeEntryFilterInput @cost(weight: "10") order: [TimeEntrySortInput!] @cost(weight: "10")): TimeEntriesConnection @listSize(assumedSize: 200, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 50, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
  timeEntry(id: UUID!): TimeEntry @cost(weight: "10")
  projects(where: ProjectFilterInput @cost(weight: "10") order: [ProjectSortInput!] @cost(weight: "10")): [Project!]! @cost(weight: "10")
  project(code: String!): Project @cost(weight: "10")
}

type TagValue {
  id: Int!
  value: String!
  projectTag: ProjectTag!
}

"A connection to a list of items."
type TimeEntriesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [TimeEntriesEdge!]
  "A flattened list of the nodes."
  nodes: [TimeEntry!]
}

"An edge in a connection."
type TimeEntriesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: TimeEntry!
}

type TimeEntry {
  id: UUID!
  issueId: String
  standardHours: Decimal!
  overtimeHours: Decimal!
  description: String
  startDate: LocalDate!
  completionDate: LocalDate!
  status: TimeEntryStatus!
  declineComment: String
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: String
  project: Project!
  projectTask: ProjectTask!
  tags: [TimeEntryTag!]!
}

type TimeEntryTag {
  id: Int!
  timeEntry: TimeEntry!
  tagValue: TagValue!
}

input BooleanOperationFilterInput {
  eq: Boolean @cost(weight: "10")
  neq: Boolean @cost(weight: "10")
}

input DateTimeOperationFilterInput {
  eq: DateTime @cost(weight: "10")
  neq: DateTime @cost(weight: "10")
  in: [DateTime] @cost(weight: "10")
  nin: [DateTime] @cost(weight: "10")
  gt: DateTime @cost(weight: "10")
  ngt: DateTime @cost(weight: "10")
  gte: DateTime @cost(weight: "10")
  ngte: DateTime @cost(weight: "10")
  lt: DateTime @cost(weight: "10")
  nlt: DateTime @cost(weight: "10")
  lte: DateTime @cost(weight: "10")
  nlte: DateTime @cost(weight: "10")
}

input DecimalOperationFilterInput {
  eq: Decimal @cost(weight: "10")
  neq: Decimal @cost(weight: "10")
  in: [Decimal] @cost(weight: "10")
  nin: [Decimal] @cost(weight: "10")
  gt: Decimal @cost(weight: "10")
  ngt: Decimal @cost(weight: "10")
  gte: Decimal @cost(weight: "10")
  ngte: Decimal @cost(weight: "10")
  lt: Decimal @cost(weight: "10")
  nlt: Decimal @cost(weight: "10")
  lte: Decimal @cost(weight: "10")
  nlte: Decimal @cost(weight: "10")
}

input IntOperationFilterInput {
  eq: Int @cost(weight: "10")
  neq: Int @cost(weight: "10")
  in: [Int] @cost(weight: "10")
  nin: [Int] @cost(weight: "10")
  gt: Int @cost(weight: "10")
  ngt: Int @cost(weight: "10")
  gte: Int @cost(weight: "10")
  ngte: Int @cost(weight: "10")
  lt: Int @cost(weight: "10")
  nlt: Int @cost(weight: "10")
  lte: Int @cost(weight: "10")
  nlte: Int @cost(weight: "10")
}

input ListFilterInputTypeOfProjectTagFilterInput {
  all: ProjectTagFilterInput @cost(weight: "10")
  none: ProjectTagFilterInput @cost(weight: "10")
  some: ProjectTagFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfProjectTaskFilterInput {
  all: ProjectTaskFilterInput @cost(weight: "10")
  none: ProjectTaskFilterInput @cost(weight: "10")
  some: ProjectTaskFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfTagValueFilterInput {
  all: TagValueFilterInput @cost(weight: "10")
  none: TagValueFilterInput @cost(weight: "10")
  some: TagValueFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfTimeEntryFilterInput {
  all: TimeEntryFilterInput @cost(weight: "10")
  none: TimeEntryFilterInput @cost(weight: "10")
  some: TimeEntryFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfTimeEntryTagFilterInput {
  all: TimeEntryTagFilterInput @cost(weight: "10")
  none: TimeEntryTagFilterInput @cost(weight: "10")
  some: TimeEntryTagFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input LocalDateOperationFilterInput {
  eq: LocalDate @cost(weight: "10")
  neq: LocalDate @cost(weight: "10")
  in: [LocalDate] @cost(weight: "10")
  nin: [LocalDate] @cost(weight: "10")
  gt: LocalDate @cost(weight: "10")
  ngt: LocalDate @cost(weight: "10")
  gte: LocalDate @cost(weight: "10")
  ngte: LocalDate @cost(weight: "10")
  lt: LocalDate @cost(weight: "10")
  nlt: LocalDate @cost(weight: "10")
  lte: LocalDate @cost(weight: "10")
  nlte: LocalDate @cost(weight: "10")
}

input LogTimeInput {
  projectCode: String!
  task: String!
  issueId: String
  standardHours: Decimal!
  overtimeHours: Decimal = 0
  description: String
  startDate: LocalDate!
  completionDate: LocalDate!
  tags: [TagInput!]
}

input ProjectFilterInput {
  and: [ProjectFilterInput!]
  or: [ProjectFilterInput!]
  code: StringOperationFilterInput
  name: StringOperationFilterInput
  isActive: BooleanOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  availableTasks: ListFilterInputTypeOfProjectTaskFilterInput
  tags: ListFilterInputTypeOfProjectTagFilterInput
  timeEntries: ListFilterInputTypeOfTimeEntryFilterInput
}

input ProjectSortInput {
  code: SortEnumType @cost(weight: "10")
  name: SortEnumType @cost(weight: "10")
  isActive: SortEnumType @cost(weight: "10")
  createdAt: SortEnumType @cost(weight: "10")
  updatedAt: SortEnumType @cost(weight: "10")
}

input ProjectTagFilterInput {
  and: [ProjectTagFilterInput!]
  or: [ProjectTagFilterInput!]
  id: IntOperationFilterInput
  tagName: StringOperationFilterInput
  isRequired: BooleanOperationFilterInput
  isActive: BooleanOperationFilterInput
  project: ProjectFilterInput
  allowedValues: ListFilterInputTypeOfTagValueFilterInput
}

input ProjectTaskFilterInput {
  and: [ProjectTaskFilterInput!]
  or: [ProjectTaskFilterInput!]
  id: IntOperationFilterInput
  taskName: StringOperationFilterInput
  isActive: BooleanOperationFilterInput
  project: ProjectFilterInput
}

input ProjectTaskSortInput {
  id: SortEnumType @cost(weight: "10")
  taskName: SortEnumType @cost(weight: "10")
  isActive: SortEnumType @cost(weight: "10")
  project: ProjectSortInput @cost(weight: "10")
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String @cost(weight: "10")
  neq: String @cost(weight: "10")
  contains: String @cost(weight: "20")
  ncontains: String @cost(weight: "20")
  in: [String] @cost(weight: "10")
  nin: [String] @cost(weight: "10")
  startsWith: String @cost(weight: "20")
  nstartsWith: String @cost(weight: "20")
  endsWith: String @cost(weight: "20")
  nendsWith: String @cost(weight: "20")
}

input TagInput {
  name: String!
  value: String!
}

input TagValueFilterInput {
  and: [TagValueFilterInput!]
  or: [TagValueFilterInput!]
  id: IntOperationFilterInput
  value: StringOperationFilterInput
  projectTag: ProjectTagFilterInput
}

input TimeEntryFilterInput {
  and: [TimeEntryFilterInput!]
  or: [TimeEntryFilterInput!]
  id: UuidOperationFilterInput
  issueId: StringOperationFilterInput
  standardHours: DecimalOperationFilterInput
  overtimeHours: DecimalOperationFilterInput
  description: StringOperationFilterInput
  startDate: LocalDateOperationFilterInput
  completionDate: LocalDateOperationFilterInput
  status: TimeEntryStatusOperationFilterInput
  declineComment: StringOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  userId: StringOperationFilterInput
  project: ProjectFilterInput
  projectTask: ProjectTaskFilterInput
  tags: ListFilterInputTypeOfTimeEntryTagFilterInput
}

input TimeEntrySortInput {
  id: SortEnumType @cost(weight: "10")
  issueId: SortEnumType @cost(weight: "10")
  standardHours: SortEnumType @cost(weight: "10")
  overtimeHours: SortEnumType @cost(weight: "10")
  description: SortEnumType @cost(weight: "10")
  startDate: SortEnumType @cost(weight: "10")
  completionDate: SortEnumType @cost(weight: "10")
  status: SortEnumType @cost(weight: "10")
  declineComment: SortEnumType @cost(weight: "10")
  createdAt: SortEnumType @cost(weight: "10")
  updatedAt: SortEnumType @cost(weight: "10")
  userId: SortEnumType @cost(weight: "10")
  project: ProjectSortInput @cost(weight: "10")
  projectTask: ProjectTaskSortInput @cost(weight: "10")
}

input TimeEntryStatusOperationFilterInput {
  eq: TimeEntryStatus @cost(weight: "10")
  neq: TimeEntryStatus @cost(weight: "10")
  in: [TimeEntryStatus!] @cost(weight: "10")
  nin: [TimeEntryStatus!] @cost(weight: "10")
}

input TimeEntryTagFilterInput {
  and: [TimeEntryTagFilterInput!]
  or: [TimeEntryTagFilterInput!]
  id: IntOperationFilterInput
  timeEntry: TimeEntryFilterInput
  tagValue: TagValueFilterInput
}

input UpdateTimeEntryInput {
  task: String
  issueId: String
  standardHours: Decimal
  overtimeHours: Decimal
  description: String
  startDate: LocalDate
  completionDate: LocalDate
  tags: [TagInput!]
}

input UuidOperationFilterInput {
  eq: UUID @cost(weight: "10")
  neq: UUID @cost(weight: "10")
  in: [UUID] @cost(weight: "10")
  nin: [UUID] @cost(weight: "10")
  gt: UUID @cost(weight: "10")
  ngt: UUID @cost(weight: "10")
  gte: UUID @cost(weight: "10")
  ngte: UUID @cost(weight: "10")
  lt: UUID @cost(weight: "10")
  nlt: UUID @cost(weight: "10")
  lte: UUID @cost(weight: "10")
  nlte: UUID @cost(weight: "10")
}

enum SortEnumType {
  ASC
  DESC
}

enum TimeEntryStatus {
  NOT_REPORTED
  SUBMITTED
  APPROVED
  DECLINED
}

"The purpose of the `cost` directive is to define a `weight` for GraphQL types, fields, and arguments. Static analysis can use these weights when calculating the overall cost of a query or response."
directive @cost("The `weight` argument defines what value to add to the overall cost for every appearance, or possible appearance, of a type, field, argument, etc." weight: String!) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION

"The purpose of the `@listSize` directive is to either inform the static analysis about the size of returned lists (if that information is statically available), or to point the analysis to where to find that information."
directive @listSize("The `assumedSize` argument can be used to statically define the maximum length of a list returned by a field." assumedSize: Int "The `slicingArguments` argument can be used to define which of the field's arguments with numeric type are slicing arguments, so that their value determines the size of the list returned by that field. It may specify a list of multiple slicing arguments." slicingArguments: [String!] "The `slicingArgumentDefaultValue` argument can be used to define a default value for a slicing argument, which is used if the argument is not present in a query." slicingArgumentDefaultValue: Int "The `sizedFields` argument can be used to define that the value of the `assumedSize` argument or of a slicing argument does not affect the size of a list returned by a field itself, but that of a list returned by one of its sub-fields." sizedFields: [String!] "The `requireOneSlicingArgument` argument can be used to inform the static analysis that it should expect that exactly one of the defined slicing arguments is present in a query. If that is not the case (i.e., if none or multiple slicing arguments are present), the static analysis may throw an error." requireOneSlicingArgument: Boolean! = true) on FIELD_DEFINITION

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

"The `Decimal` scalar type represents a decimal floating-point number."
scalar Decimal

"The `LocalDate` scalar type represents a ISO date string, represented as UTF-8 character sequences YYYY-MM-DD. The scalar follows the specification defined in RFC3339"
scalar LocalDate

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")
// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TimeReportingApi.Data;

#nullable disable

namespace TimeReportingApi.Data.Migrations
{
    [DbContext(typeof(TimeReportingDbContext))]
    [Migration("20251028001618_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TimeReportingApi.Models.Project", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Code");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("idx_projects_active");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("uq_projects_name");

                    b.ToTable("projects", (string)null);
                });

            modelBuilder.Entity("TimeReportingApi.Models.ProjectTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("ProjectCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("project_code");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("task_name");

                    b.HasKey("Id");

                    b.HasIndex("ProjectCode")
                        .HasDatabaseName("idx_project_tasks_project");

                    b.HasIndex("ProjectCode", "TaskName")
                        .IsUnique()
                        .HasDatabaseName("uq_project_tasks_project_task");

                    b.ToTable("project_tasks", (string)null);
                });

            modelBuilder.Entity("TimeReportingApi.Models.TagConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AllowedValues")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("allowed_values");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("ProjectCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("project_code");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("tag_name");

                    b.HasKey("Id");

                    b.HasIndex("ProjectCode")
                        .HasDatabaseName("idx_tag_configurations_project");

                    b.HasIndex("ProjectCode", "TagName")
                        .IsUnique()
                        .HasDatabaseName("uq_tag_configurations_project_tag");

                    b.ToTable("tag_configurations", (string)null);
                });

            modelBuilder.Entity("TimeReportingApi.Models.TimeEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateOnly>("CompletionDate")
                        .HasColumnType("date")
                        .HasColumnName("completion_date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DeclineComment")
                        .HasColumnType("text")
                        .HasColumnName("decline_comment");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("IssueId")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("issue_id");

                    b.Property<decimal>("OvertimeHours")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("overtime_hours");

                    b.Property<string>("ProjectCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("project_code");

                    b.Property<decimal>("StandardHours")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("standard_hours");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("tags");

                    b.Property<string>("Task")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("task");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .HasDatabaseName("idx_time_entries_status");

                    b.HasIndex("ProjectCode", "StartDate")
                        .HasDatabaseName("idx_time_entries_project_date");

                    b.HasIndex("UserId", "StartDate")
                        .HasDatabaseName("idx_time_entries_user");

                    b.ToTable("time_entries", null, t =>
                        {
                            t.HasCheckConstraint("chk_date_range", "start_date <= completion_date");

                            t.HasCheckConstraint("chk_overtime_hours_positive", "overtime_hours >= 0");

                            t.HasCheckConstraint("chk_standard_hours_positive", "standard_hours >= 0");

                            t.HasCheckConstraint("chk_status_valid", "status IN ('NOT_REPORTED', 'SUBMITTED', 'APPROVED', 'DECLINED')");
                        });
                });

            modelBuilder.Entity("TimeReportingApi.Models.ProjectTask", b =>
                {
                    b.HasOne("TimeReportingApi.Models.Project", "Project")
                        .WithMany("AvailableTasks")
                        .HasForeignKey("ProjectCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("TimeReportingApi.Models.TagConfiguration", b =>
                {
                    b.HasOne("TimeReportingApi.Models.Project", "Project")
                        .WithMany("TagConfigurations")
                        .HasForeignKey("ProjectCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("TimeReportingApi.Models.TimeEntry", b =>
                {
                    b.HasOne("TimeReportingApi.Models.Project", "Project")
                        .WithMany("TimeEntries")
                        .HasForeignKey("ProjectCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("TimeReportingApi.Models.Project", b =>
                {
                    b.Navigation("AvailableTasks");

                    b.Navigation("TagConfigurations");

                    b.Navigation("TimeEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
